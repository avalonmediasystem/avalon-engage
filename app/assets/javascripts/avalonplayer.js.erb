<%#
Copyright 2011-2013, The Trustees of Indiana University and Northwestern
University.  Licensed under the Apache License, Version 2.0 (the "License"); you
may not use this file except in compliance with the License.

You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND, either express or implied. See the License for the
specific language governing permissions and limitations under the License.
---  END LICENSE_HEADER BLOCK  ---
%>
/**
 * Put everything into the AvalonPlayer namespace to avoid global conflicts
 */
window.AvalonPlayer = {
    _opts: null,
    _element: null,
    _playerType: null,
    
    init: function(el, opts) {
      _opts = opts;
      _element = el;
      _playerType = null;
      
      if (_opts.flash && swfobject.hasFlashPlayerVersion("9")) {
        // Pulls in Engage, renders the first stream
        this.generateEngagePlayer(_opts.flash[0]);        
        _playerType = "flash";
      } else if (_opts.hls) {
        var player = this.generateHTML5Player(_opts.hls[0]);
        _playerType = "hls";
        this.generateQualitySelector();
      } else if (_opts.flash && !swfobject.hasFlashPlayerVersion("9")) {
        _element.html('<p>Please install/update your Flash player</p>');
      }
      
      return this;
    },

    switchStream: function(opts) {
      _opts = opts;
      // Change source and reinitialize player based on _playerType
      if (_playerType == "flash") {
        AvalonPlayer.resetEngage();

        stream = _opts.flash[0];
        if ('audio' == stream.format) {
          $("#oc_flash-player").addClass('audio').removeClass('video');
        } else {
          $('#oc_flash-player').removeClass('audio').addClass('video');
        };
        AvalonPlayer.setEngageStream(stream);
        Opencast.Initialize.initme();
      } else if (_playerType == "hls") {
        /* Quick and dirty */
        _element.empty();
        AvalonPlayer.generateHTML5Player(_opts.hls[0]);
      }
      AvalonPlayer.generateQualitySelector();
      return this;
    },

    /*
     * Assemble HTML snippets to create an HTML5 multimedia player. To change 
     * the appearance modify the segments at the end of the source file
     */
    HTML5Aspect: 0.5625,

    generateHTML5Player: function(stream) {
      var $t = this;
      var container = $(this.html5container);
      if ("audio" == stream.format) {
        var source = $(this.html5audiosource).attr('src', stream.url);
        var player = $(this.html5audioplayer).width('100%').attr('controls', 'controls').append(source).append(this.unsupportedMessage);
        container.prepend(player);
      } else if ("video" == stream.format) {    
        var source = $(this.html5videosource).attr('src', stream.url);    
        var player = $(this.html5videoplayer).width('100%').attr('poster', _opts.poster).append(source).append(this.unsuppportedMessage);
        container.prepend(player);
        $(player).bind('loadedmetadata', function() { $t.HTML5Aspect = this.videoHeight / this.videoWidth; $t.resizeHTML5Player(); })
    } else {
        /* Do nothing */
      }
      $('#nojs').remove();

      _element.append(container);
      $t.resizeHTML5Player();
      $(window).bind('resize', function() { $t.resizeHTML5Player(); });
    },

    resizeHTML5Player: function() {
      if (this.HTML5Aspect != null) {
        var newHeight = $('video').width() * this.HTML5Aspect;
        $('video').height(newHeight);
      }
    },

    setEngageStream: function(stream) {
      // Overrides to return custom values instead of URL Params
      var origGetURLParameterFn = $.getURLParameter;
      $.getURLParameter = function (name) { 
        if (name == "id") {
          return _opts.mediaPackageId;
        } else if (name == "mediaUrl1") {
          return stream.url;
        } else if (name == "mimetype1") {
          return stream.mimetype;
        } else if (name == "coverUrl1") {
          return _opts.poster;
        } else { 
          return origGetURLParameterFn(name);
        }  
      }
    },

    // This whole thing is horrible, needs fixing
    generateEngagePlayer: function(stream) {
      var styles = ["/engage/ui/css/player-multi-hybrid/player-multi-hybrid.css",
                    "/engage/ui/css/player-multi-hybrid/player-multi-hybrid-icons.css",
                    "/engage/ui/css/player/shared.css",
                    "/engage/ui/css/player/jquery.wysiwyg.css",
                    "/engage/ui/css/oc.segments.css",
                    "/engage/ui/css/player/watch.css",
                    "/assets/avalonplayer.css"];
      $.each(styles, function(i, val) {
        // Needs IE fix: document.createStyleSheet();
        $('head').append( $('<link rel="stylesheet" type="text/css" />').attr('href', val) );
      });
      
      // Don't try this at home!
      /*
       * This kludge reduces jumpiness by hard coding the class elements
       * into the page. It isn't DRY but it should work better for
       * users
       */
      var player_page = "/video_player.htm";
      _element.load(player_page, function() { 
		      /*
		      if (stream.format == "audio") {
                        $("#oc_flash-player", "#oc_flash-player-loading").removeClass('video').addClass('audio');
                    } else {
                      $("#oc_flash-player", '#oc_flash-player-loading').removeClass("audio").addClass('video');
		      }
		      */
        $.getScript("<%= asset_path 'head.min.js' %>", function() {
          head.js("/engage/ui/js/jquery/plugins/jquery.utils.js",
                  "/engage/ui/js/bridge/lib/FABridge.js",
                  "/engage/ui/js/bridge/Videodisplay.js",
                  "/engage/ui/js/jquery/plugins/jARIA.js",
                  "/engage/ui/js/jquery/plugins/jquery.cookie.js",
                  "/engage/ui/js/jquery/plugins/jquery.corners.js",
                  "/engage/ui/js/jquery/plugins/jquery.identicon5.js",
                  "/engage/ui/js/jquery/plugins/jquery.crypt.js",
                  "/engage/ui/js/player/init-watch.js",
                  "/engage/ui/js/player/player-multi-hybrid-scubber.js",
                  "/engage/ui/js/player/player-multi-hybrid.js",
                  "/engage/ui/js/player/ariaSpinbutton.js",
                  "/engage/ui/js/jquery/plugins/jquery.wysiwyg.js",
                  "/engage/ui/js/jquery/plugins/jquery.client.js",
                  "/engage/ui/js/jquery/plugins/jquery.sparkline.min.js",
                  "/engage/ui/js/engage-ui.js",
                  "/engage/ui/js/jquery/plugins/jquery.timers-1.2.js",
                  "/engage/ui/js/engage_plugins/plugin-controller.js",
                  "/engage/ui/js/engage_plugins/description.js",
                  "/engage/ui/js/engage_plugins/download.js",
                  "/engage/ui/js/engage_plugins/description-plugin.js",
                  "/engage/ui/js/engage_plugins/segments_ui.js",
                  "/engage/ui/js/engage_plugins/segments_ui-plugin.js",
                  "/engage/ui/js/engage_plugins/segments_ui_slider-plugin.js",
                  "/engage/ui/js/engage_plugins/segments.js",
                  "/engage/ui/js/engage_plugins/segments-plugin.js",
                  "/engage/ui/js/engage_plugins/segments_text.js",
                  "/engage/ui/js/engage_plugins/segments_text-plugin.js",
                  "/engage/ui/js/engage_plugins/series-plugin.js",
                  "/engage/ui/js/engage_plugins/series.js",
                  "/engage/ui/js/engage_plugins/logging.js",
                  "/engage/ui/js/player/player-multi-hybrid-initialize.js",
                  "/engage/ui/js/ext/trimpath.js",
                  "/engage/ui/js/player/watch.js",
                  "/engage/ui/js/player/player-multi-hybrid-flash.js", 
                  
                  function() { 	  
		    if (stream.format == "audio") {
                        $("#oc_flash-player").removeClass('video').addClass('audio');
                        $("#oc_flash-player-loading").removeClass('video').addClass('audio');
                   } else {
                      $("#oc_flash-player").removeClass("audio").addClass('video');
                      $('#oc_flash-player-loading').removeClass("audio").addClass('video');
		    }
		    AvalonPlayer.setEngageStream(stream);
                    Opencast.Initialize.initme();
                    AvalonPlayer.cleanupEngage();
                    AvalonPlayer.generateQualitySelector();
                  }
          );
        });
      });
    },

    generateQualitySelector: function() {      
      var selector = $('#streamQuality');
      if (selector) {
        selector.empty().unbind().detach();
      }
      selector = $(AvalonPlayer.selectDropdown);
      
      if (_playerType == "flash") {
        this.appendQualityOptions(_opts.flash, selector);
      } else if (_playerType == "hls") {
        this.appendQualityOptions(_opts.hls, selector);
      }

      selector.change(function() {
        var newQual = $(this).val();
        // Repopulates player with the selected stream
        if (_playerType == "flash") {
          var streamInfo = AvalonPlayer.getStreamByQuality(_opts.flash, newQual);
          AvalonPlayer.resetEngage();
          AvalonPlayer.setEngageStream(streamInfo);
          Opencast.Initialize.initme();
        } else if (_playerType == "hls") {
          var streamInfo = AvalonPlayer.getStreamByQuality(_opts.hls, newQual);
          AvalonPlayer.updateLiveStream(streamInfo);
        }
      });

      _element.append(selector);
    },

    resetEngage: function() {
      Opencast.Player.doPause();
      Opencast.Player.setCurrentTime('00:00:00');
      Opencast.Player.setPlayhead(0);    
    },
    
    updateLiveStream: function(stream) {
      player = _element.find('video, audio')[0];
      player.pause();
      
      /**
       * Start by getting rid of all the child <source> elements
       */
      $(player).find('source').detach();
      
      player.src = stream.url;
      player.load();
   },
        
    appendQualityOptions: function(streamArray, selector) {
      $.each(streamArray, function(index, stream) {
        var opt = $('<option/>').attr('value', stream.quality).text(stream.quality + " quality");
        selector.append(opt);
      });
    },

    // Gets a stream info hash of a specific quality
    getStreamByQuality: function(streamArray, quality) {
      for (var i = 0; i < streamArray.length; i++) {
        if (quality == streamArray[i].quality) {
          return streamArray[i];
        }
      }
    },

    cleanupEngage: function() {
      $("#oc_btn-description").parent().hide();
      $("#oc_btn-slidetext").parent().hide();
      $("#oc_btn-slides").parent().hide();
      
      $("#oc_btn-description").detach();
      $("#oc_btn-slidetext").detach();
      $("#oc_btn-slides").detach();
    },

    /*
     * Stubs for the audio and video players. Before placing in the page
     * it is suggested to switch out attributes like the poster image. Bootstrap
     * class dependencies shouldn't be an issue because it is also required for
     * Blacklight and Hydra.
     */
    html5container: '<div id="multimedia_container" class="whitespace"></div>',
    html5videoplayer: "<video poster='placeholder.png' preload='metadata' controls></video>",
    html5videosource: "<source src='placeholder' type='video/mp4'>" ,

    html5audioplayer: "<audio controls='controls'></audio>",
    html5audiosource: "<source src='placeholder' type='audio/mp3'>",
    
    selectDropdown: "<select id='streamQuality'></select>",
    unsupportedMessage: "<p>Your browser does not appear to support HTML5 video or audio content. Supported platforms are iOS and Android 4.0+.</p>"    
}

/**
 * TO DO : Put this into a proper loading block
$().ready(function() {
  container = $('
  if (container) {
  new AvalonPlayer.init(container, opts);
}
*/
